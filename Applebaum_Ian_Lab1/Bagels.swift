//
//  Bagels.swift
//  Applebaum_Ian_Lab1
//
//  Created by Ian Applebaum on 2/13/20.
//  Copyright © 2020 Ian Applebaum. All rights reserved.
//

import Foundation
class Bagels {
	// MARK: Game data structures
	/// `number` is our struct for comparison. `number` has a `first`, `second`, and `third` value to be compared.
	/**
	Player's guess:
	~~~
	var guess = number(first: 3, second: 2, Third: 1)
	~~~
	The computer could generate a number for comparison:
	~~~
	var randomNumber = number(first: 4, second: 5, Third: 6)
	~~~
	These can be compared simply by
	~~~
	if guess == randomNumber{
	print("numbers match")
	}
	~~~
	*/
	struct number: Equatable {
		var first:Int
		var second:Int
		var Third:Int
		static func == (lhs: number, rhs: number) -> Bool {
			return lhs.first == rhs.first && lhs.second == rhs.second && lhs.Third == rhs.Third
		}
		func printNumber() -> String {
			return "\(first)\(second)\(Third)"
		}
	}
	/// Simple Enum for yes or no responses
	enum responses:Int {
		case no
		case yes
		case oops
	}
	/// The hint to the user
	enum hints {
		case fermi
		case pico
		case bagels
	}
	// MARK: Game setup
	/// generates the random `number` for the game. Returning struct `number`
	private func generateRandomNumber()->number{
		let first = Int.random(in: 1 ..< 10)
		let second = Int.random(in: 1 ..< 10)
		let third = Int.random(in: 1 ..< 10)
		return number(first: first, second: second, Third: third)
	}
	// MARK: Game Logic
	/// Checks for the player's first guess Int<10
	/// - Parameters:
	///   - guess: the number the user guessed
	///   - randomNumber: number generated by the computer
	///   - result: Either FERMI when you guessed right! PICO if the number is right but the wrong order. BAGELS you guessed wrong!
	fileprivate func checkFirstGuess(_ guess: Bagels.number, _ randomNumber: Bagels.number, _ result: inout String) -> hints {
		result.append("guess = \(guess.printNumber()), ")
		switch guess.first {
		case randomNumber.first:
			return .fermi
		case randomNumber.second:
			return .pico
		case randomNumber.Third:
			return .pico
		default:
			return .bagels
		}
	}
	/// Checks for the player's second guess Int<10
	/// - Parameters:
	///   - guess: the number the user guessed
	///   - randomNumber: number generated by the computer
	///   - result: Either FERMI when you guessed right! PICO if the number is right but the wrong order. BAGELS you guessed wrong!
	fileprivate func checkSecondGuess(_ guess: Bagels.number, _ randomNumber: Bagels.number, _ result: inout String) -> hints{
		switch guess.second {
		case randomNumber.second:
			return .fermi
		case randomNumber.first:
			return .pico
		case randomNumber.Third:
			return .pico
		default:
			return .bagels
		}
	}
	/// Add FERMI to the result String
	/// - Parameter result: The result string to hold the hint.
	fileprivate func addFermi(_ result: inout String) {
		result.append(" FERMI")
	}
	
	/// Add PICO to the result string
	/// - Parameter result: The result string to hold the hint.
	fileprivate func addPICO(_ result: inout String) {
		result.append(" PICO")
	}
	/// Add BAGELS to result string
	/// - Parameter result: The result string to hold the hint.
	fileprivate func addBagels(_ result: inout String) {
		result.append("BAGELS")
	}
	/// Checks for the player's third guess Int<10
	/// - Parameters:
	///   - guess: the number the user guessed
	///   - randomNumber: number generated by the computer
	///   - result: Either FERMI when you guessed right! PICO if the number is right but the wrong order. BAGELS you guessed wrong!
	fileprivate func checkThirdGuess(_ guess: Bagels.number, _ randomNumber: Bagels.number, _ result: inout String) -> hints{
		switch guess.Third {
		case randomNumber.Third:
			return .fermi
		case randomNumber.second:
			return .pico
		case randomNumber.first:
			return .pico
		default:
			return .bagels
		}
	}
	
	/// Trap for errors in keyboard input. No 0s are allowed in the game. if a 0 is found it restarts the `getUserGuess()` to try again.
	/// - Parameters:
	///   - guess: the `number` struct to hold the player's guess.
	///   - first: The first number in the player's guess
	///   - second: The second number in the player's guess
	fileprivate func inputErrorTrapping(_ guess: inout Bagels.number, _ first: Int, _ second: Int) {
		if guess == number(first: 0, second: 0, Third: 0){
			print("000 NOT VALID TRY AGAIN")
			getUserGuess(&guess)
		}
		else if first < 10 {
			if guess == number(first: first, second: 0, Third: 0){
				print("\(first)00 NOT VALID TRY AGAIN")
				getUserGuess(&guess)
			}
		}
		if first < 10 && second < 10 {
			if guess == number(first: first, second: second, Third: 0){
				print("\(first)\(second)0 NOT VALID TRY AGAIN")
				getUserGuess(&guess)
			}
		}
	}
	
	/// Get the player's guess from the keyboard and convert it to `number` struct
	/// - Parameter guess: the `number` struct to hold the player's guess.
	fileprivate func getUserGuess(_ guess: inout Bagels.number) {
		let keyboad = readLine(strippingNewline: true) ?? ""
		let first: Int = Int(keyboad[0]) ?? 0
		let second: Int = Int(keyboad[1]) ?? 0
		let third: Int = Int(keyboad[2]) ?? 0
		guess = number(first: first, second: second, Third: third)
		inputErrorTrapping(&guess, first, second)
	}
	
	
	/// checks player's guesses for pico (guessed right number but out of order). If it contains pico then it adds the `hint` to `results`
	/// - Parameters:
	///   - firstGuess: Player's first guess `hint` result.
	///   - result: The result string to hold the hint.
	///   - secondGuess: Player's second guess `hint` result
	///   - thirdGuess: Player's third guess `hint` result
	fileprivate func checkForPICO(_ firstGuess: Bagels.hints, _ result: inout String, _ secondGuess: Bagels.hints, _ thirdGuess: Bagels.hints) {
		if firstGuess == .pico {
			addPICO(&result)
		}
		if secondGuess == .pico {
			addPICO(&result)
		}
		if thirdGuess == .pico {
			addPICO(&result)
		}
	}
	
	/// Checks the players guesses for Fermi (Correct placement of number)
	/// - Parameters:
	///   - firstGuess: Player's first guess `hint` result
	///   - result: The result string to hold the hint.
	///   - secondGuess: Player's second guess `hint` result
	///   - thirdGuess: Player's third guess `hint` result
	fileprivate func checkForFERMI(_ firstGuess: Bagels.hints, _ result: inout String, _ secondGuess: Bagels.hints, _ thirdGuess: Bagels.hints) {
		if firstGuess == .fermi {
			addFermi(&result)
		}
		if secondGuess == .fermi {
			addFermi(&result)
		}
		if thirdGuess == .fermi {
			addFermi(&result)
		}
	}
	
	/// Checks that all of the player's guesses are wron
	/// - Parameters:
	///   - firstGuess: Player's first guess `hint` result
	///   - secondGuess: Player's second guess `hint` result
	///   - thirdGuess: Player's third guess `hint` result
	///   - result: The result string to hold the hint.
	fileprivate func checkForBAGELS(_ firstGuess: Bagels.hints, _ secondGuess: Bagels.hints, _ thirdGuess: Bagels.hints, _ result: inout String) {
		if firstGuess == .bagels && secondGuess == .bagels && thirdGuess == .bagels {
			addBagels(&result)
		}
	}
	// MARK: Game Play
	/**
	1. Generate the secret number
	2. Determine whether the current guess is a winner
	3. Evaluate the current guess and print hints
	*/
	public func playGame(){
		welcome()
		printStars()
		let randomNumber = generateRandomNumber()
		var guess = number(first: 0, second: 0, Third: 0)
		var result = ""
		var numberOfGuesses = 0
		print("Guess a number!")
		repeat{
			numberOfGuesses += 1
			result = ""
			getUserGuess(&guess)
			let firstGuess = checkFirstGuess(guess, randomNumber, &result)
			let secondGuess = checkSecondGuess(guess, randomNumber, &result)
			let thirdGuess = checkThirdGuess(guess, randomNumber, &result)
			checkForPICO(firstGuess, &result, secondGuess, thirdGuess)
			checkForFERMI(firstGuess, &result, secondGuess, thirdGuess)
			checkForBAGELS(firstGuess, secondGuess, thirdGuess, &result)
			print(result)
		}while (guess != randomNumber)
		snarkyGameWinText(numberOfGuesses)
		wouldYouliketoplayagain()
	}
	
	/// prints pretty stars in the console
	fileprivate func printStars() {
		var stars = ""
		for _ in 0...30{
			stars.append("⭐️")
		}
		print(stars)
	}
	
	/// prints welcome and instructions
	fileprivate func welcome() {
		print("WELCOME enter a three digit number such as 123.\nDo not enter any 0s!\nIf you guess the same number as me you win!\nI'll give you hints along the way.\nIf you guess a number right I'll say FERMI!\nIf you get a number right but out of order I'll say PICO.\nIf you just don't get it I'll say BAGEL!")
		print("Lets begin!")
	}
	
	/// Asks the player if they would like to play again. 1 for yes. 0 for no.
	fileprivate func wouldYouliketoplayagain() {
		print("Would you like to play again?\nYes!(1)\nNo(0)")
		let keyboad = readLine(strippingNewline: true) ?? ""
		let response: responses = responses(rawValue: Int(keyboad) ?? 3) ?? .oops
		switch response {
		case .yes:
			playGame()
		case .no:
			print("Thanks for playing!")
			exit(1)
		default:
			print("Oops try again?")
			wouldYouliketoplayagain()
		}
	}
	
	/// Console gets sassy if you take too many tries to win
	/// - Parameter numberOfGuesses: number of times the player guessed a number
	fileprivate func snarkyGameWinText(_ numberOfGuesses: Int) {
		if numberOfGuesses > 3{
			print("Congratulations YOU WON! Only took you \(numberOfGuesses) tries! 😜")
		}
		else if numberOfGuesses < 3{
			print("WOW! YOU WON in just \(numberOfGuesses) guesses!")
		}
	}
	
	
}
